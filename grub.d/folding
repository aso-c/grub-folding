#! /bin/sh
set -e

#
# grub-mkconfig helper script.
# (c) aso<Solomatov.A.A@gmail.com>, v.2.2.0 by 07.07.2014.							#
#   GPLv3										#
#
# -t, --pipline       processing input file (stdin) into stdout output file (for debug)
# -i, --in-place      processing config file "in place" from stdout; default option
#
# This config script create separate submenu for each group of consequtive items
# GRUB boot menu for each type OS.
# It will be processed to the next operating systems:
# - Microsoft Windows;
# - Gentoo.
#
# Project files:
#    - folding - the config script that creates a submenu from sequence of a homogeneous
#                  menu items.
#    - _gen-prolog  - Gentoo section prologue file; it can contain custom code,
# 		      that will be placed immediately before the submenu "Gentoo"
#		      or inside submenu at the beginning of it.
#		      Submenu title also given in that file.
#    - _gen-epilog  - Gentoo section epilogue file; it can contain custom code,
#		      that will be placed immediately after the submenu "Gentoo"
#		      or inside submenu at the end of it.
#    - _win-prolog  - Microsoft Windows section prologue file; it can contain custom code,
#		      that will be placed immediately before the submenu "Microsoft Windows"
#		      or inside submenu at the beginning of it.
#		      Submenu title also given in that file.
#    - _win-epilog  - Microsoft Windows section epilogue file; it can contain custom code,
#		      that will be placed immediately after the submenu "Microsoft Windows"
#		      or inside submenu at the end of it.
#		      Submenu title also given in that file.
#
# The project files are placed in /etc/grub.d directory.
# The "folding" script in the order of execution must follow after os_prober and before
# user scripts (usually exec priority 40 and more), e.g. 31..39. (39_folding, for example).
# Section files priority is absent, they used in its original form.
#

ver='2.2.0'
version="v.$ver, by 07.07.2014 from aso"

gen='gen'
win='win'

sysconfdir="/etc"
grub_mkcfg_dir="${sysconfdir}/grub.d"

self=`basename $0`
GRUB_PREFIX=`echo '/boot/grub' | sed "s,//*,/,g"`

tmpdir='/tmp'
tmprefix="$tmpdir/fold$$$"



BEG='BEGIN'
EN='END'


usage()
{
    cat <<EOF
Usage: $self [OPTION]
Insert Folding section in GRUB configuration file

  -h, --help            this help
  -v, --version         version of program
  -t, --pipline         processing input file (stdin) into stdout output file
  -i, --in-place        processing config file "in place" from stdout; default option

Report bugs to <Solomatov.A.A@gmail.com>.
EOF
} # usage() --------------------------------------


#
# Shielding with parameter analyses
# for using in sed-scripts
# Simplified sintax:
#	any symbols from set: {| (+ )?} -> \{original_symbol}
#	char chain \{| (+ )?}           -> {original_symbol} (w/o '\')
shield()
{

	    local subst='|(+ )?'

    # parameter - substitution string
    main_subst()
    {
	# The order is important!
	sed -e "s/[${1}]/\\\&/g;" -e "s/\(\\\\\\\\\)\([${1}]\)/\2/g"
    } # main_subst()

    cfg=''
    # Processing the arguments.
    while getopts bin f
    do
	case $f in
	b)
	    # не экранировать пробелы
	    cfg="b$cfg" ;;
	i)
	    # экранировать косую ('/')
	    cfg="i$cfg"	;;
	n)
	    # отменить стандартные подстановки
	    cfg="n$cfg"	;;
	esac
    done

    shift $(expr $OPTIND - 1)

    if [ "$(expr index ${cfg}u n)" != 0 ]; then
	subst="$(echo "${subst}" | sed -e 's/[|(+)?]//g')"
    fi

    if [ "$(expr index u$cfg b)" != 0 ]; then
	subst="$(echo "${subst}" | sed -e 's/ //g')"
    fi

    if [ "$(expr index u$cfg i)" != 0 ]; then
	subst="/$subst"
    fi

    if [ "$1no" = 'no' ]; then
	# use in pipe-mode
	main_subst "${subst}"
     else
	# use parameter as input
	echo "${*}" | main_subst "${subst}"
    fi
} # shield


# Create marker
mark()
{
    echo "### $1 ###"
} # mark() ---------------------------------------


# Echoing OS name from class
# Parameter:
#   #1 - class OS (gentoo, win),
o_name()
{
case "$1" in
'win')	  echo 'Microsoft Windows'
	;;
'gentoo') echo 'Gentoo Linux'
	;;
'gen')	  echo 'Gentoo Linux'
	;;
esac
} # o_name() -------------------------------------


p='prolog'
e='epilog'

# Echoing string of control comment
# Parameters:
#   $1 - OS class (gen, win...)
#   $2 - tail (prolog, epilog...)
echo_cmd()
{
    shield $(mark "$BEG $grub_mkcfg_dir/_$1-$2")\\
    echo "# exec!$grub_mkcfg_dir/_$1-$2 -i #\\"
    shield $(mark "$EN $grub_mkcfg_dir/_$1-$2")\\n
} # echo_cmd


# Echoing string for markup section in config file function
# Parameters:
#   $1 - OS class (gen, win...)
echo_remark()
{
	# regexp block for using in criteria for sampling full menu srction
	local blkcmt='([^{#}\\n]*(#[^\\n]*)?\\n)*[^{#}\\n]*'

cat << EOF
  
#presample
  /^[ \t]*menuentry[^#]\+$(o_name $1)/! b; $ b

:presample
  # presampling menuentry section & intersection gap into pattern space
  /^$(shield "$blkcmt{($blkcmt{($blkcmt{$blkcmt})*$blkcmt})*$blkcmt}")/! { N; b presample}

  N; /### \($BEG\)\|\($EN\)/ b		# control comment - go out
  /\n[^#\n]*submenu/ b			# other submenu section was started
  /\n[^#\n]*menuentry/! b presample	# detect that not start of new section - continue
  /\n[^#\n]*$(o_name $1)/! b		# new section is not in sequence - go out

  # insert control comment before output buffer
  i\\\\
  i\\$(echo_cmd $1 $p)
 
:consect; n	# continue sampling section

:blank
  /[^\n]\+/! {N; b blank}		# if current line is blank - continue sampling

  /### \($BEG\)\|\($EN\)/ b close	# control comment - close section
  /[^#]*submenu/ b close		# other subsection started
  /[^#]*menuentry/! b consect		# detect that not start of new section
  /[^#]*$(o_name $1)/ b consect		# new section is started

:close
  i\\$(echo_cmd $1 $e)
  /### BEG/! i\\\\
EOF
} # echo_remark() -------------------------------------------------------------------------


# Insert folding section in config file function on file insertion
# Parameters:
#   $1 - OS class (win/gentoo)
#   $2 - sect class (prolog/epilog)
remark_insert()
{
    sed -e "s/# *exec! $(shield -i "*(${grub_mkcfg_dir}/_$1-$2)([^#]*)")/\1\2 /e"
} # remark_insert()------------------------------------------------------------



# Processing the arguments.
while test $# -gt 0
do
    option=$1
    shift

    case "$option" in
    -h | --help)
	usage
	exit 2 ;;
    -v | --version)
	echo $version
	exit 0 ;;
    -t | --pipeline)
	pipe=${option} ;;
    -i | --in-place)
	pipe='' ;;
    -*)
	allopts="$allopts $option"
	;;
    # Explicitly ignore non-option arguments, for compatibility.
    esac
done


echo "Folding (v.$ver) ..." >&2

echo "# Folding $version"
echo "# This is a stub"
echo "# Output of this module was placed bypass the main flow"


if ! [ $pipe ]; then

  tmpbuf='/tmp/$$$sect$$$'
  exec 4<&0	# store stdin into #4
  exec 6>&1	# store stdout into #6
  outfile=$(readlink /proc/self/fd/6)
  set -- $(du -b $outfile); fsz1=$1
  exec 1>&-		# close stdout
  exec 0< $outfile
  exec 1> $tmpbuf

fi


##************##


sed $allopts -e "$(echo_remark $win)"	|
sed $allopts -e "$(echo_remark $gen)"	|
remark_insert $win $p	|
remark_insert $win $e	|
remark_insert $gen $p	|
remark_insert $gen $e

##************##


if ! [ $pipe ]; then
	#restore all files
  exec 1>&-		# close stdout
  exec 0<&-		# close stdin
  set -- $(du -b $tmpbuf); fsz2=$1
  cat $tmpbuf > $outfile
  exec 0<&4
  exec 1>&6
  tail -c $(($fsz2 - $fsz1)) $tmpbuf
  rm "$tmpbuf"	# remove tmpbuf

fi
