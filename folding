#! /bin/sh
set -e
#***************************************************************************************#
#											#
# Insert Folding section in GRUB configuration file					#
# (c) aso, v.1.8.0 by 02.01.2014.							#
#   GPLv3										#
#											#
# -t, --pipline           processing input file (stdin) into stdout output file		#
# -i, --in-place          processing config file "in place" from stdout; default option	#
#											#
#***************************************************************************************#


ver='1.8.0'
version="$ver, by 02.01.2014 from aso"

gen='gen'
win='win'

sysconfdir="/etc"
#grub_mkcfg_dir="${sysconfdir}/grub.d"
# for dev
grub_mkcfg_dir='./my.grub.d'

self=`basename $0`
GRUB_PREFIX=`echo '/boot/grub' | sed "s,//*,/,g"`

tmpdir='/tmp'
tmprefix="$tmpdir/fold$$$"

## Calling from folding marker
#_infolding='Yes'
#export _infolding



BEG='BEGIN'
EN='END'



usage()
{
    cat <<EOF
Usage: $self [OPTION]
Insert Folding section in GRUB configuration file

  -t, --pipline           processing input file (stdin) into stdout output file
  -i, --in-place          processing config file "in place" from stdout; default option

###Report bugs to <bug-grub@gnu.org>.
EOF
} # usage() --------------------------------------


# Create marker
mark() {
local MARK='###'
echo "$MARK\ $1\ $MARK"
} # mark() ---------------------------------------


# Generate section file name
# Parameters:
#   #1 - prefix, OS_name (gentoo, win),
#   #2 - tail {prolog | epilog}
sect_fn() {
echo "_$1-$2"
} # sect_fn() ------------------------------------


# Echoing OS name from class
# Parameter:
#   #1 - class OS (gentoo, win),
o_name()
{
case "$1" in
'win')	  echo 'Microsoft Windows'
	;;
'gentoo') echo 'Gentoo Linux'
	;;
'gen')	  echo 'Gentoo Linux'
	;;
esac
} # o_name() -------------------------------------


# Create full format marker string
# Paramatars:
#   $1 - 'BEGIN' / 'END'
#   $2 - full file name
fullmark()
{
sed 's/\//\\&/'g <<EOF
$(mark "$1\ $grub_mkcfg_dir/$2")
EOF
} # fullmark() -----------------------------------




p='prolog'
e='epilog'

# Echoing control string for insert folding section
# in config file function on file insertion
# Parameters:
#   $1 - OS class (win/gentoo)
#   $2 - sect class (prolog/epilog)
echo_final()
{
cat <<-EOF
    /$(fullmark $BEG $(sect_fn $1 $2))/! b; $ b # stop current line processing
    h; s/.*//; n	# hold && clear pattern space; read new lone
    /$(fullmark $EN $(sect_fn $1 $2))/! {x; G; b}
    # exchange & output file after restored str
    x; r $tmprefix$(sect_fn $1 $2)
EOF
} # echo_final()---------------------------------------------------------------


# Insert folding section in config file function on file insertion
# Parameters:
#   $1 - OS class (win/gentoo)
#   $2 - sect class (prolog/epilog)
remark_insert()
{
sed -e "$ a$(fullmark $EN $(sect_fn $1 $2))" << EOF > "$tmprefix$(sect_fn $1 $2)"
$(${grub_mkcfg_dir}/$(sect_fn $1 $2) -i)
EOF
sed $allopts -e "$(echo_final $1 $2)"
rm -f "$tmprefix$(sect_fn $1 $2)"
} # remark_insert()------------------------------------------------------------


# Echoing string for markup section in config file function
# Parameters:
#   $1 - OS class (gen, win...)
echo_remark()
{
cat << EOF
    /\([^#]*.*menuentry\)\([^#].*$(o_name $1)\)/! b; $ b # if section /menuentry <OS_Name>/ was not started - exit
    i$(fullmark $BEG $(sect_fn $1 $p))
    i$(fullmark $EN $(sect_fn $1 $p))\\n

:consect	# continue sampling section
    n; /^}/! b consect

:intersect	# out of section, sampling interval between sections
    n; /### \($BEG\)\|\($EN\)/ b close	# control comment - close section
    /[^#]*.*menuentry/! b intersect	# detect that not start of new section
    /[^#]*.*$(o_name $1)/ b consect	# new section is started

:close
    i$(fullmark $BEG $(sect_fn $1 $e))
    i$(fullmark $EN $(sect_fn $1 $e))\\n
EOF
} # echo_remark() -------------------------------------------------------------------------


#for dev target
if [ $_dev ] ; then
    return
fi


# Processing the arguments.
while test $# -gt 0
do
    option=$1
    shift

    case "$option" in
    -h | --help)
	usage
	exit 2 ;;
    -v | --version)
#	echo "$self (${PACKAGE_NAME}) ${PACKAGE_VERSION}"
	echo $version
	exit 0 ;;
    -t | --pipeline)
	pipe=${option} ;;
    -i | --in-place)
	pipe='' ;;
    -*)
	allopts="$allopts $option"
	;;
    # Explicitly ignore non-option arguments, for compatibility.
    esac
done


echo "Folding ($ver) ..." >&2

echo "# Folding $version"
echo "# This is a stub"
echo "# Output of this module was placed bypass the main flow"


if ! [ $pipe ] ; then

  tmpbuf='/tmp/$$$sect$$$'
  exec 4<&0	# store stdin into #4
  exec 6>&1	# store stdout into #6
  outfile=$(readlink /proc/self/fd/6)
  set -- $(du -b $outfile); fsz1=$1
  exec 1>&-		# close stdout
  exec 0< $outfile
  exec 1> $tmpbuf

fi


##************##



sed $allopts -e "$(echo_remark $win)"	|
sed $allopts -e "$(echo_remark $gen)"	|
remark_insert $win $p	|
remark_insert $win $e	|
remark_insert $gen $p	|
remark_insert $gen $e

##************##


if ! [ $pipe ] ; then
	#restore all files
  exec 1>&-		# close stdout
  exec 0<&-		# close stdin
  set -- $(du -b $tmpbuf); fsz2=$1
  cat $tmpbuf > $outfile
  exec 0<&4
  exec 1>&6
  tail -c $(($fsz2 - $fsz1)) $tmpbuf
  rm "$tmpbuf"	# remove tmpbuf

fi