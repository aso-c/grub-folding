#! /bin/sh
set -e

#
# grub-mkconfig helper script.
# (c) aso<Solomatov.A.A@gmail.com>, v.2.2.11 by 14.07.2014.
#   GPLv3
#
# -t, --pipeline,     pipline mode: data from input file (stdin) processed 'on fly'
#     --pipe              and saved into stdout output file (intended for debug)
# -i, --in-place      processing config file "in place" from stdout; default option
#
# This config script create separate submenu for each group of consequtive items
# GRUB boot menu for each type OS.
# It will be processed to the next operating systems:
# - Microsoft Windows;
# - Gentoo.
#
# Project files:
#    - folding - the config script that creates a submenu from sequence of a homogeneous
#                  menu items.
#    - _gen-prolog  - Gentoo section prologue file; it can contain custom code,
# 		      that will be placed immediately before the submenu "Gentoo"
#		      or inside submenu at the beginning of it.
#		      Submenu title also given in that file.
#    - _gen-epilog  - Gentoo section epilogue file; it can contain custom code,
#		      that will be placed immediately after the submenu "Gentoo"
#		      or inside submenu at the end of it.
#    - _win-prolog  - Microsoft Windows section prologue file; it can contain custom code,
#		      that will be placed immediately before the submenu "Microsoft Windows"
#		      or inside submenu at the beginning of it.
#		      Submenu title also given in that file.
#    - _win-epilog  - Microsoft Windows section epilogue file; it can contain custom code,
#		      that will be placed immediately after the submenu "Microsoft Windows"
#		      or inside submenu at the end of it.
#		      Submenu title also given in that file.
#
# The project files are placed in /etc/grub.d directory.
# The "folding" script in the order of execution must follow after os_prober and before
# user scripts (usually exec priority 40 and more), e.g. 31..39. (39_folding, for example).
# Section files priority is absent, they used in its original form.
#

ver='2.2.11'
version="v.$ver, by 14.07.2014 from aso"

#win='Microsoft Windows'	# product variant
win='Windows'	# for test in laptop
gen='Gentoo Linux'
gentoo='Gentoo Linux'

p='prolog'
e='epilog'


sysconfdir="/etc"
#grub_mkcfg_dir="${sysconfdir}/grub.d"
# for dev target
#grub_mkcfg_dir='./my.grub.d'
grub_mkcfg_dir='./grub.d'

#self=`basename $0`
#GRUB_PREFIX=`echo '/boot/grub' | sed "s,//*,/,g"`

tmpdir='/tmp'
tmprefix="$tmpdir/fold$$$"


BEG='BEGIN'
EN='END'

usage()
{
    cat <<EOF
Usage: $self [OPTION]
Insert Folding section in GRUB configuration file

  -h, --help             this help
  -v, --version          version of the program
  -t, --pipeline, --pipe processing input file (stdin) into stdout output file
  -i, --in-place         processing config file "in place" from stdout; default option

Report bugs to <Solomatov.A.A@gmail.com>.

$version
EOF
} # usage() -------------------------------------------------------------------


# Create marker
mark() {
    echo "### $1 ###"
} # mark() ------------


# Echoing string of control comment
# Parameters:
#   $1 - OS class (gen, win...)
#   $2 - tail (prolog, epilog...)
echo_cmd()
{
    shield $(mark "$BEG $grub_mkcfg_dir/_$1-$2")\\
    echo "# exec!$grub_mkcfg_dir/_$1-$2 -i #\\"
    shield $(mark "$EN $grub_mkcfg_dir/_$1-$2")\\n
} # echo_cmd() ----------------------------------------------------------------


# Insert folding section in config file function on file insertion
# Parameters:
#   $1 - OS class (win/gen\gentoo\)
#   $2 - sect class (prolog/epilog)
echo_final()
{
    echo "s\/# *exec! *(${grub_mkcfg_dir}/_$1-$2)([^#]*)\/\\\1\\\2 \/e" | shield -i
#    echo "s/# *exec! $(shield -i "*(${grub_mkcfg_dir}/_$1-$2)([^#]*)")/\\\1\\\2 /e"
#    echo "s/# *exec! $(shield -i \"*(${grub_mkcfg_dir}/_$1-$2)([^#]*)\")/\\\1\\\2 /e"
} # echo_final()---------------------------------------------------------------


# Output (print) into stdout sed script string for markup section in config file function
# Parameters:
#   $1 - OS class (gen, win...)
echo_remark()
{
	# regexp block for using in criteria for sampling full menu srction
	local blkcmt='([^{#}\\n]*(#[^\\n]*)?\\n)*[^{#}\\n]*'
	eval os="\$$1"
#	echo "OS name is: $os" >&2

cat << EOF
## entrance
# # if not matched submenu - go to presample
#  /\([^#]*.*submenu\)/! b presample; $ b
#  # resampling of inner sequence
#  b #exit
  
#presample
  # if not matched /menuentry <OS_Name>/ - e.g. needed section was not started - exit
#  /\([^#]*menuentry\)\([^#]\+${os}\)/! b; $ b
  /^[ \t]*menuentry[^#]\+${os}/! b; $ b

:presample
  # presampling menuentry section & intersection gap into pattern space
  /^$(shield "$blkcmt{($blkcmt{($blkcmt{$blkcmt})*$blkcmt})*$blkcmt}")/! { N; b presample}

  N; /### \($BEG\)\|\($EN\)/ b		# control comment - go out
  /\n[^#\n]*submenu/ b			# other submenu section was started
  /\n[^#\n]*menuentry/! b presample	# detect that not start of new section - continue
  /\n[^#\n]*${os}/! b			# new section is not in sequence - go out

  # insert control comment before output buffer
  i\\\\
  i\\$(echo_cmd $1 $p)
#  i\\\\n\\$(echo_cmd $1 $p)
 
:consect; n	# continue sampling section

:blank
  /[^\n]\+/! {N; b blank}		# if current line is blank - continue sampling

  /### \($BEG\)\|\($EN\)/ b close	# control comment - close section
  /[^#]*submenu/ b close		# other subsection started
  /[^#]*menuentry/! b consect		# detect that not start of new section
  /[^#]*${os}/ b consect		# new section is started

:close
  i\\$(echo_cmd $1 $e)
  /### BEG/! i\\\\
EOF
} # echo_remark() -------------------------------------------------------------


#
# Shielding with parameter analyses
# for using in sed-scripts
# Simplified sintax:
#	any symbols from set: {| (+ )?} -> \{original_symbol}
#	single symbol \ w/o {| (+ )?}   -> \\{original_symbol}
#	char chain \{| (+ )?}           -> {original_symbol} (w/o '\')
#       char chain \\                   -> \
# TODO: Замена должна иметь вид:
# [' ', '(', ');, '|'] -> ['\ ', '\(', '\)', '\|'] ; возможно что-то ещё, например '\'
# \[' ', '(', ');, '|'] -> [' ', '(', ');, '|'] ; отменяет действие, сохраняет первоначальный вид 
# \\ -> \ ; отменяет действие '&'
# -i, --slash-screening - экранирование символа косой '/' (по умолчанию - нет)
# -b, --space-ignore - не экранировать пробелы
# -n, --no-std-subst - не делать стандартную подстановку
shield()
{
	local subst='| (+)?'	# substitution chars

    # Processing the arguments.
    while getopts bin f
    do
	case $f in
	b)  # не экранировать пробелы
	    subst="$(echo "${subst}" | sed -e 's/ //g')" ;;
	i)  # экранировать косую ('/')
	    subst="/$subst" ;;
	n)  # отменить стандартные подстановки
	    subst="$(echo "${subst}" | sed -e 's/[|(+)?]//g')" ;;
	esac
    done
    shift $(($OPTIND - 1))

    exe=''
    if [ "$1no" != 'no' ]; then exe='echo $* | '; fi

    eval $exe sed -e '"s/[${subst}]/\\\&/g"' -e '"s/\(\\\\\\\\\)\([${subst}]\)/\2/g"'

} # shield() ------------------------------------------------------------------


#==============================================================================

#for dev target
if [ $_dev ] ; then
    return
fi


# Processing the arguments.

#---------------------------------------------------
# Note that we use `"$@"' to let each command-line parameter expand to a
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o hvti --long help,version,pipeline,in-place \
     -s sh -n 'folding' -- "$@")

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"
# eval set -- "$(getopt -o hvti --long help,version,pipeline,in-place \
#      -s sh -n 'folding' -- $@)"


while true ; do
    case "$1" in

    -h|--help)
	usage
	exit 2 ;;
    -v|--version)
#	echo "$self (${PACKAGE_NAME}) ${PACKAGE_VERSION}"
	echo $version
	exit 0 ;;
    -t|--pipeline)
	pipe=${1} ;;
    -i|--in-place)
	pipe='' ;;
    --)
        shift
	break ;;
    -*)
	allopts="$allopts ${1}" ;;
    # Explicitly ignore non-option arguments, for compatibility.
    *)
	echo "Internal error!"
	exit 1 ;;

    esac
    shift
done


echo "Folding (v.$ver)..." >&2

echo "# Folding $version"
echo "# This is a stub"
echo "# Output of this module was placed bypass the main flow"


if ! [ $pipe ]; then

#  tmpbuf='/tmp/$$$sect$$$'
  mkdir $tmprefix
  tmpbuf="$tmprefix/$$$sect$$$"
  exec 4<&0	# store stdin into #4
  exec 6>&1	# store stdout into #6
  outfile=$(readlink /proc/self/fd/6)
  set -- $(du -b $outfile); fsz1=$1
  exec 1>&-		# close stdout
  exec 0< $outfile
  exec 1> $tmpbuf
fi


##************##


sed $allopts -e "$(echo_remark win)"	|
sed $allopts -e "$(echo_remark gen)"	|
sed $allopts -e "$(echo_final win $p)"	|
sed $allopts -e "$(echo_final win $e)"	|
sed $allopts -e "$(echo_final gen $p)"	|
sed $allopts -e "$(echo_final gen $e)"

##************##


if ! [ $pipe ]; then
	#restore all files
  exec 1>&-		# close stdout
  exec 0<&-		# close stdin
  set -- $(du -b $tmpbuf); fsz2=$1
  cat $tmpbuf > $outfile
  exec 0<&4
  exec 1>&6
  tail -c $(($fsz2 - $fsz1)) $tmpbuf
#  rm "$tmpbuf"	# remove tmpbuf
  rm -rf $tmprefix
fi
