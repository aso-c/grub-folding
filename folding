#! /bin/sh
set -e

####################################################
#
# Insert Folding section in GRUB configuration file
# v.0.9.0 by 30.12.2012. from aso
#
# -t, --pipline           processing input file (stdin) into stdout output file
# -i, --in-place          processing config file "in place" from stdout; default option
#
####################################################


ver='0.9.0'
version="$ver, by 30.12.2012 from aso"
BEG='BEGIN'
Sec='Section'
gen='gentoo'
win='win'

sysconfdir="/etc"
grub_mkcfg_dir="${sysconfdir}/grub.d"

self=`basename $0`
GRUB_PREFIX=`echo '/boot/grub' | sed "s,//*,/,g"`


pfn='grub.cfg'	# Processing file name
cos=$win


usage () {
    cat <<EOF
Usage: $self [OPTION]
Insert Folding section in GRUB configuration file

  -t, --pipline           processing input file (stdin) into stdout output file
  -i, --in-place          processing config file "in place" from stdout; default option

Report bugs to <bug-grub@gnu.org>.
EOF
}


# Create marker
mark () {
local MARK='###'
echo "$MARK\ $1\ $MARK"
}


# Generate section file name
# Parameters:
#   #1 - prefix, OS_name (gentoo, win),
#   #2 - tail {prolog | epilog}
sect_fn(){
echo "${grub_mkcfg_dir}/$1-$2.cfg"
}



# Echoing OS name from class
# Parameter:
#   #1 - class OS (gentoo, win),
o_name() {
case "$1" in
'win')	  echo 'Microsoft Windows'
	;;
'gentoo') echo 'Gentoo Linux'
	;;
'gen')	  echo 'Gentoo Linux'
	;;
esac
}


p='prolog'
e='epilog'

# Insert section in config file function
# Parameters:
#   $1 - OS class
remark_insert()
{
## control string for sed for search control comment: '### Begin...' & insert file name
echo "
/$(mark "BEGIN\ $(echo $(sect_fn $1 $p)| sed 's/\//\\&/'g)")/ r $(sect_fn $1 $p)
/$(mark "BEGIN\ $(echo $(sect_fn $1 $e)| sed 's/\//\\&/'g)")/ r $(sect_fn $1 $e)
"
} # sect_insert()--------------------------------------------------------------


# Echoing string for varkup section in config file function
# Parameters:
#   $1 - OS class (gentoo, win...)
#   $2 - OS name (ex. 'Microsoft Windows' etc...)
echo_remark()
{

echo "
/\([^#]*.*menuentry\)\([^#].*$(o_name $1)\)/! b end  # detect start of section /menuentry <OS_Name>/

i\\
\\\n$(mark "BEGIN\ $(sect_fn $1 $p)")
i\\$(mark "END\ $(sect_fn $1 $p)")\\\n

:consect		# continue sampling section
n
/^}/! b consect

:interch		# final of section. Sampling iterval between sections
n
/[^#]*.*menuentry/ {	# detect new section
/[^#]*.*$(o_name $1)/ b consect	# new section is desired
b close			# new section is not desired
}
/### \(BEGIN\)\|\(END\)/ b close	# detect new section, marked by control comments
b interch

:close

i\\
\\\n$(mark "BEGIN\ $(sect_fn $1 $e)")
i\\$(mark "END\ $(sect_fn $1 $e)")\\\n

:end
"

} # echo_remark() -------------------------------------------------------------------------



# Processing the arguments.
while test $# -gt 0
do
    option=$1
    shift

    case "$option" in
    -h | --help)
	usage
	exit 2 ;;
    -v | --version)
#	echo "$self (${PACKAGE_NAME}) ${PACKAGE_VERSION}"
	echo $version
	exit 0 ;;
    -t | --pipeline)
	pipe=${option} ;;
    -i | --in-place)
	pipe='' ;;
    -*)
	allopts="$allopts $option"
	;;
    # Explicitly ignore non-option arguments, for compatibility.
    esac
done


echo "Folding ($ver) ..." >&2

echo "# Folding $version"
echo "# This is a stub"
echo "# Output of this module was placed bypass the main flow"


if ! [ $pipe ] ; then

  tmpbuf='/tmp/$$$sect$$$'
  exec 4<&0	# store stdin into #4
  exec 6>&1	# store stdout into #6
  outfile=$(readlink /proc/self/fd/6)
  set -- $(du -b $outfile)
  fsz1=$1
#  echo "-------------\n file size1 $fsz1" >&2
  exec 1>&-		# close stdout
  exec 0< $outfile
  exec 1> $tmpbuf
fi


##************##
sed $allopts -e "$(echo_remark $win)" | sed $allopts -e "$(remark_insert $win)" | sed $allopts -e "$(echo_remark $gen)" | sed $allopts -e "$(remark_insert $gen)"
##************##


if ! [ $pipe ] ; then
	#restore all files
  exec 1>&-		# close stdout
  exec 0<&-		# close stdin
  set -- $(du -b $tmpbuf)
  fsz2=$1
#  echo "file size2 $fsz2" >&2
  cat $tmpbuf > $outfile
  exec 0<&4
  exec 1>&6
  tail -c $(($fsz2 - $fsz1)) $tmpbuf
  rm "$tmpbuf"	# remove tmpbuf
  
#echo "End folding." >&2

fi